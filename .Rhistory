.$prop
joint.prob
marg.prob <-
age.marginal.df %>%
filter(age == "A") %>%
.$prop
marg.prob
cond.prob <- joint.prob/marg.prob
cond.prob
library(Rmisc)
library(Hmisc)
library(ggplot2)
library(boot)
dati <- read.csv("data/captures.csv", sep=";")
CI(dati$weight_g, ci=0.95)
CI(na.omit(dati$weight_g), ci=0.95)
dati2 <- na.omit(dati)
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli <- group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=weight_g.mean, colour=sex)) +
geom_errorbar(aes(ymin=weight_g.lower, ymax=weight_g.upper), width=.1) +
geom_line() +
geom_point()
as.data.frame(CI(na.omit(dati$weight_g), ci=0.95)) -> CImean
CImean
variabile <- dati2$footlength_mm # o qualsiasi altra variabile numerica
# script 'generalizzato'
intervalli <- group.CI(variabile ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=variabile.mean, colour=sex)) +
geom_errorbar(aes(ymin=variabile.lower, ymax=variabile.upper), width=.1) +
geom_line() +
geom_point()
boot.data <- boot(dati2$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
x <- c(15, 10, 13, 7, 9, 8, 21, 9, 14, 8)
y <- c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12)
# normality test
# with a qqplot
par(mfrow=c(1,2))
qqnorm(x); qqline(x, col="red")
qqnorm(y); qqline(y, col="red")
# with the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
shapiro.test(c(8, 6))
shapiro.test(c(8, 6, 9))
shapiro.test(c(9, 9, 9))
shapiro.test(c(9, 9, 9,1))
shapiro.test(c(9, 9, 9.1))
shapiro.test(c(0, 0, 9999999999999))
shapiro.test(c(2, 7, 7, 9))
shapiro.test(c(2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9))
# homogeneity of variances
var(x)/var(y)
var.test(x,y)
95/95
var(x); var(y); var(x)/var(y)
#t-test
t.test(x,y,
paired = FALSE,
var.equal = TRUE,
alternative = "two.sided")
smart_ttest <- function(x, y, alpha = 0.05, ...) {
# Test delle varianze
var_result <- var.test(x, y)
# Decide quale t-test usare
if (var_result$p.value > alpha) {
cat("Varianze uguali (p =", round(var_result$p.value, 4), ") → Student t-test\n")
t.test(x, y, var.equal = TRUE, ...)
} else {
cat("Varianze diverse (p =", round(var_result$p.value, 4), ") → Welch t-test\n")
t.test(x, y, var.equal = FALSE, ...)
}
}
smart_ttest(x, y)
#t-test
t.test(x,y,
paired = FALSE,
var.equal = TRUE,
alternative = "two.sided")
smart_ttest(x, y)
# non parametric test
wilcox.test(x,y,
paired = FALSE,
alternative = "two.sided")
z.test <- function(x, sigma) {}
View(z.test)
View(RollDie)
function(n) sample(1:6, n, replace = TRUE)
RollDie()
RollDie(9)
View(RollDie)
cat("Z test\nZ = ", Z, "\n")
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
cat("Z test\nZ = ", Z, "\n")
cat("p-value =", p_val, "\n")
}
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test")
}
cat("Z test\nZ = ", Z, "\n")
cat("p-value =", p_val, "\n")
}
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform a Z test")
}
cat("Z test\nZ = ", Z, "\n")
cat("p-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 005, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105, 105, 105, 105, 105, 105, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform a Z test")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 005, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105, 105, 105, 105, 105, 105, 105),
sigma=15,
mu=100
)
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform a Z test\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test\n(n should be ≥ 30")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n is < 30)\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n is < 30)\n")
}
cat("Z-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n")
}
cat("Z-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n\n")
}
cat("Z-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("\tWarning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n\n")
}
cat("\tZ-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
# ?cars
summary(cars)
boxplot(cars)
cars.lm <- lm(dist ~ speed, data = cars)
names(cars.lm)
coef(cars.lm)
cars.lm
lm(dist ~ speed, data = cars); lm(cars$dist ~ cars$speed)
lm(dist ~ speed)
names(cars.lm)
coef(cars.lm)
plot(1)
plot(1, 999)
plot(C(1, 999))
plot(c(1, 999))
abline((-1)*cars.lm)
abline(cars.lm)
plot(c(1, 100))
abline(cars.lm)
plot(c(1, 999))
abline(cars.lm)
plot(c(-50, 50))
abline(cars.lm)
plot(cars.lm)
?plot
dispeed <- cars$dist ~ cars$speed
dispeed
plot(dispeed)
plot(dispeed type="l")
#dispeed <- cars$dist ~ cars$speed
plot(dispeed)
plot(dispeed, type="l")
plot(dispeed, type="b")
plot(dispeed, type="c")
plot(dispeed, type="o")
plot(dispeed, type="h")
plot(dispeed, type="s")
plot(dispeed, type="S")
plot(dispeed, type="n")
plot(dispeed, type="w")
plot(dist ~ speed, data = cars, pch = 16)
abline(cars.lm, col="red", lwd=2)
summary(cars.lm)
plot(cars.lm)
-17.58 + 3.93 * (8) # point estimate
cars[5,] # real data
cars[,3]
cars[,2]
cars[,0]
-17.58 + 3.93 * (8) # point estimate
cars[5,] # real data
fitted(cars.lm)
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
points(cars$speed, fitted(cars.lm), col="red", pch=19)
predict(cars.lm, newdata = data.frame(speed = c(0,6,8,21)))
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
points(c(6,8,21),
predict(cars.lm, newdata = data.frame(speed = c(6,8,21))),
col="blue", pch=19)
predict(cars.lm, newdata = data.frame(speed = c(0,6,8,21)))
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
points(c(6,8,21),
predict(cars.lm, newdata = data.frame(speed = c(6,8,21))),
col="blue", pch=19)
residuals(cars.lm)
# Residual standard error
carsumry <- summary(cars.lm)
carsumry$sigma
residuals(cars.lm)[1]
residuals(cars.lm)
residuals(cars.lm)
# Residual standard error
carsumry <- summary(cars.lm)
carsumry$sigma
carsumry
summary(cars.lm)
# new <- data.frame(speed = c(5,6,21))
# predict(cars.lm, newdata = new, interval = "confidence")
# predict(cars.lm, newdata = new, interval = "prediction")
library(HH)
ci.plot(cars.lm)
# or
# library(UsingR)
# simple.lm(cars$speed, cars$dist, show.ci=TRUE)
residuals(cars.lm)
par(mfrow=c(1,3)) #3 colonne
hist(residuals(cars.lm))
boxplot(residuals(cars.lm))
qqnorm(residuals(cars.lm))
qqline(residuals(cars.lm))
par(mfrow=c(1,1)) #reset colonne
#par(mfrow=c(1, 4))
plot(cars.lm)
#par(mfrow=c(1, 1))
par(mfrow=c(1, 4))
#par(mfrow=c(2, 2))
plot(cars.lm)
par(mfrow=c(1, 1))
#par(mfrow=c(1, 4))
par(mfrow=c(2, 2))
plot(cars.lm)
par(mfrow=c(1, 1))
#par(mfrow=c(1, 4))
par(mfrow=c(2, 2))
plot(cars.lm)
par(mfrow=c(1, 1))
# par(mfrow=c(1, 4))
# par(mfrow=c(2, 2))
plot(cars.lm)
# par(mfrow=c(1, 1))
# install.packages("lmtest")
library(lmtest)
dwtest(cars.lm, alternative = "two.sided")
cars[23,]
dim(cars)
cars[-23,]
dim(cars[-23,])
plot(cars.lm)
cars[23,]
dim(cars)
cars[-23,]
dim(cars[-23,])
plot(cars.lm)
shapiro.test(residuals(cars.lm))
data(cars)
cars.lm <- lm(dist ~ speed, data = cars)
coef(cars.lm)
names(cars.lm)
residuals(cars.lm)
par(mfrow=c(1,3)) #3 colonne
hist(residuals(cars.lm))
boxplot(residuals(cars.lm))
qqnorm(residuals(cars.lm))
qqline(residuals(cars.lm))
par(mfrow=c(1,1)) #reset colonne
# par(mfrow=c(1, 4))
# par(mfrow=c(2, 2))
plot(cars.lm)
# par(mfrow=c(1, 1))
# install.packages("lmtest")
library(lmtest)
dwtest(cars.lm, alternative = "two.sided")
cars[23,]
dim(cars)
cars[-23,]
dim(cars[-23,])
shapiro.test(residuals(cars.lm))
library(lmtest)
bptest(cars.lm)
data("trees")
head(trees)
hist(trees$Volume)
hist(trees$Volume^2)
library(MASS)
?boxcox
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
plot(cars.lm)
library(lmtest)
bptest(cars.lm)
data("trees")
head(trees)
hist(trees$Volume)
hist(trees$Volume^2)
library(MASS)
?boxcox
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
20*6
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees,
lambda = seq(0.1, 1.9, length = 10))
bctrans <- boxcox(Volume^0.308 ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume^0.308 ~ Height + Girth, data = trees,
lambda = seq(0.1, 1.9, length = 10))
