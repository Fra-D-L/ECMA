set.seed(123)
final <- kmeans(df, 3, nstart = 25)
print(final)
fviz_cluster(final, data = df,
geom = c("point"),
ellipse.type = "euclid")
final$cluster
df_birds %>%
mutate(cluster_id = final$cluster) -> df_birds_cluster
write.csv(df_birds_cluster, file = "output/df_birds_cluster.csv")
writexl::write_xlsx(df_birds_cluster, "output/df_birds_cluster.xlsx")
head(df_birds_cluster)
df_birds_cluster %>%
group_by(cluster_id) %>%
summarise(meanLength = mean(LengthU_MEAN),
meanWing = mean(WingU_MEAN),
meanLifeSpan = mean(`Life span`))
df_birds_cluster %>%
group_by(cluster_id) %>%
summarise(meanLength = mean(LengthU_MEAN),
meanWing = mean(WingU_MEAN),
meanLifeSpan = mean(`Life span`),
meanClutch = mean(Clutch_MEAN))
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(readxl)
library(readr)
# # df <- USArrests[,1:2]
# df_birds <- read_xlsx("data/short.xlsx", col_types = c("text","numeric","numeric"))
# df <- na.omit(df_birds)
# df <- scale(df[,2:3])
# head(df)
european_birds <- read_delim("data/european_birds.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
european_birds %>%
dplyr::select(Species,
LengthU_MEAN,
# WingU_MEAN,
Clutch_MEAN,
`Life span`) -> df_birds
df_birds <- na.omit(df_birds)
df <- scale(df_birds[,2:5])
dim(df_birds)
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(readxl)
library(readr)
# # df <- USArrests[,1:2]
# df_birds <- read_xlsx("data/short.xlsx", col_types = c("text","numeric","numeric"))
# df <- na.omit(df_birds)
# df <- scale(df[,2:3])
# head(df)
european_birds <- read_delim("data/european_birds.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
european_birds %>%
dplyr::select(Species,
LengthU_MEAN,
# WingU_MEAN,
Clutch_MEAN,
`Life span`) -> df_birds
df_birds <- na.omit(df_birds)
df <- scale(df_birds[,2:dim(df_birds)[2]])
head(df)
distance <- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
fviz_nbclust(df, kmeans, method = "wss")
fviz_nbclust(df, kmeans, method = "silhouette")
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
# Compute k-means clustering with k = 4
set.seed(123)
final <- kmeans(df, 3, nstart = 25)
print(final)
fviz_cluster(final, data = df,
geom = c("point"),
ellipse.type = "euclid")
final$cluster
df_birds %>%
mutate(cluster_id = final$cluster) -> df_birds_cluster
write.csv(df_birds_cluster, file = "output/df_birds_cluster.csv")
writexl::write_xlsx(df_birds_cluster, "output/df_birds_cluster.xlsx")
head(df_birds_cluster)
df_birds_cluster %>%
group_by(cluster_id) %>%
summarise(meanLength = mean(LengthU_MEAN),
meanWing = mean(WingU_MEAN),
meanLifeSpan = mean(`Life span`),
meanClutch = mean(Clutch_MEAN))
df_birds_cluster %>%
group_by(cluster_id) %>%
summarise(meanLength = mean(LengthU_MEAN),
# meanWing = mean(WingU_MEAN),
meanLifeSpan = mean(`Life span`),
meanClutch = mean(Clutch_MEAN))
data(PbHeron)
# without group specified
binaryMDS(PbHeron[,4:15])
library(NADA2)
install.packages("NADA2")
esempio1 <- read.csv("data/esempio1.csv")
esempio1
esempio1 <- read.csv("data/esempio1.csv", sep = ";")
esempio1
es
mean(esempio1$Weight, na.rm = TRUE)
mean(esempio1$Weight, na.rm = TRUE)
# using the read.csv function
y <- read.csv("data/captures.csv",sep=";")
class(y) # this is a data frame
head(y) # we can see the first rows of our data frame
# or from an excel file:
# we need a specific package in this case, and we need to install it:
# install.packages("xlsx") # the line is commented because you just need to run it once
library(xlsx)
# read in the worksheet named mysheet
mydata <- read.xlsx("data/database_esercizio.xls", sheetName = "captures")
class(mydata)
install.packages("xlsx")
# or from an excel file:
# we need a specific package in this case, and we need to install it:
# install.packages("xlsx") # the line is commented because you just need to run it once
library(xlsx)
# read in the worksheet named mysheet
mydata <- read.xlsx("data/database_esercizio.xls", sheetName = "captures")
# using the read.csv function
y <- read.csv("data/captures.csv",sep=";")
class(y) # this is a data frame
head(y) # we can see the first rows of our data frame
## ---- Extract a column (i.e. a variable) -----
# we can do this using '$'
y$weight_g
# or subsetting the data frame, using square brackets '[ ]'
y["weight_g"]
y[,10] # the weight of the animals is stored in the 10th column
y[1,10] # the weight of the animals is stored in the 10th column
y[23,10] # the weight of the animals is stored in the 10th column
y[,10] # the weight of the animals is stored in the 10th column
# Let's ask R what kind of variable we are dealing with, using the 'class' function again
class(y$weight_g)
w <- y$weight_g
w
?hist # this is the simplest way to get help in R! just a question mark!
?hist # this is the simplest way to get help in R! just a question mark!
hist(y$weight_g, main="", xlab="Animal weight (g)") # with default break
hist(y$weight_g, breaks=30, main="", xlab="Animal weigth (g)") # we specified a single number giving
# dotplots (or stripcharts)
# op <- par(mfrow=c(1,3))
?stripchart
stripchart(y$weight_g, xlab="Animal weigth (g)")
stripchart(y$weight_g, xlab="Animal weigth (g)", method="jitter")
stripchart(y$weight_g, xlab="Animal weigth (g)", method="stack")
# boxplot
boxplot(y$weight_g, ylab="Animal weigth (g)")
boxplot(y$weight_g ~ y$sex + y$age, ylab="Animal weigth (g)")
boxplot(y$weight_g ~ y$sex, ylab="Animal weigth (g)")
# exercise (by your own): do the same with the foot lenght
boxplot(y$footlength_mm, ylab="Foot length (mm)")
# using the read.csv function
y <- read.csv("data/captures.csv",sep=";")
head(y) # we can see the first rows of our data frame
hist(y$weight_g, main="", xlab="Animal weight (g)") # with default break
# boxplot
boxplot(y$weight_g, ylab="Animal weigth (g)")
y$weight_g
## the mean and the median
weight <- na.omit(y$weight_g)
weight
# mean
mean(weight)
mean(y$weight_g)
# median
median(weight)
hist(weight,prob=T,ylim=c(0,0.05)) # prob=T for relative frequencies (density)
hist(weight)
hist(weight,prob=T,ylim=c(0,0.05)) # prob=T for relative frequencies (density)
hist(weight,prob=T,ylim=c(0,1)) # prob=T for relative frequencies (density)
hist(weight,prob=T,ylim=c(0,0.05)) # prob=T for relative frequencies (density)
lines(density(rnorm(1000000,mean(weight),sd(weight))),col="red")
segments(mean(weight),0,mean(weight),0.047,col="blue")
segments(median(weight),0,median(weight),0.047,col="green")
getmode <- function(x) {
uniqv <- unique(x)
uniqv[which.max(tabulate(match(x, uniqv)))]
}
getmode(weight)
## range
range(weight)
## quantile
quantile(weight) # in R, quartiles are the default for the quantile function
median(weight)
boxplot(weight, range=0)
boxplot(na.omit(y$footlength_mm))
boxplot(na.omit(y$footlength_mm), range=0)
boxplot(na.omit(y$footlength_mm))
# summary
summary(weight)
## variance
var(weight)
## standard deviation
sd(weight)
length(weight)
# boxplot
op <- par(mfrow=c(1,2))
boxplot(y$footlength_mm, col = "lightgray", ylim=c(10,30))
# boxplot(log(y$footlength_mm), col = "lightgray")
mtext("80", line=-1)
points(x=29)
# Cleveland plot/dotchart
dotchart(y$footlength_mm)
par(op)
par(mfrow=c(1,1))
# identify the outlier
plot(x=y$footlength_mm, y=y$capture_id)
identify(x=y$footlength_mm, y=y$capture_id)
# press Esc to stop the identify stuff
y[102,]
(y$weight_g)[y$weight_g > 30]
y[1,]
y[1:10,] # first ten rows
y["29",]
y[c("29","45"),]
y[,1] # one column (the first one)
y[,5:10] # from 5th to 10th column
y[,c("chip","trap_id")] # by column name, more than a column
y[1:5,c("chip","trap_id")]
library(tidyverse)
filter(y, trap_id > 43)
filter(y, trap_id < 5 | trap_id > 65)
arrange(y, trap_id)
y[,c("chip","trap_id")]
y[,c("chip","trap_id")] %>% filter(trap_id > 65)
y[,c("chip","trap_id")] %>% filter(trap_id > 65) %>% arrange(trap_id)
select(y, chip, trap_id)
y$age
y %>% group_by(age)
y %>% group_by(age) %>% summarise(mean.w = mean(na.omit(weight_g)))
mean(na.omit(y$weight_g)
)
y$sex
y %>% group_by(age, sex) %>% summarise(mean.w = mean(na.omit(weight_g)))
sample(x = 1:6, size = 5, replace = FALSE)
sample(x = 1:6, size = 20, replace = TRUE)
sample(x = 1:6, size = 20, replace = TRUE) # you get different numbers
sample(x = 1:6, size = 20, replace = TRUE) # again
RollDie <- function(n) sample(1:6, n, replace = TRUE)
d1 <- RollDie(n = 50)
sum(d1 == 6)
sum(d1 == 6)/50
d1
RollDie <- function(n) sample(1:6, n, replace = TRUE)
d1 <- RollDie(n = 50)
sum(d1 == 6)
sum(d1 == 6)/50
d1
hist(d1)
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
sims <- vector("list", 500)
probs <- vector("numeric", 500)
for (n in 1:500) {
sims[[n]] <- RollDie(n)
probs[n] <- sum(sims[[n]] == 6)/n
}
plot(probs)
abline(h=1/6)
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
roll1 = NULL  #This initializes our variable - i.e. it creates a spot in memory for it. We need to do this for any vector, table, matrix, dataframe, but not for single numbers
roll2 = NULL
for (i in 1:100) {
roll1[i] = RollDie(1)
roll2[i] = RollDie(1)
}
# We can ask how many doubles we came up with:
sum(roll1 == roll2)
# relative frequency
sum(roll1 == roll2)/100
y <- read.csv("data/captures.csv",sep=";")
y <- read.csv("data/captures.csv",sep=";")
y <- na.omit(y[,c("age", "sex")])
y %>%
group_by(age) %>%
summarise(n = n())
library(dplyr)
age.marginal.df <-
y %>%
group_by(age) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
age.marginal.df
sex.marginal.df <-
y %>%
group_by(sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
sex.marginal.df
joint.df <-
y %>%
group_by(age, sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
joint.df
joint.prob <-
joint.df %>%
filter(age == "A", sex == "F") %>%
.$prop
joint.prob
marg.prob <-
age.marginal.df %>%
filter(age == "A") %>%
.$prop
marg.prob
cond.prob <- joint.prob/marg.prob
cond.prob
library(Rmisc)
library(Hmisc)
library(ggplot2)
library(boot)
dati <- read.csv("data/captures.csv", sep=";")
CI(dati$weight_g, ci=0.95)
CI(na.omit(dati$weight_g), ci=0.95)
dati2 <- na.omit(dati)
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli <- group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=weight_g.mean, colour=sex)) +
geom_errorbar(aes(ymin=weight_g.lower, ymax=weight_g.upper), width=.1) +
geom_line() +
geom_point()
as.data.frame(CI(na.omit(dati$weight_g), ci=0.95)) -> CImean
CImean
boot.data <- boot(dati2$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
library(Rmisc)
library(Hmisc)
library(ggplot2)
library(boot)
dati <- read.csv("data/captures.csv", sep=";")
library(Rmisc)
library(Hmisc)
library(ggplot2)
library(boot)
dati <- read.csv("data/captures.csv", sep=";")
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
dati2 <- na.omit(dati)
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli <- group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli
intervalli
ggplot(intervalli, aes(x=sex, y=weight_g.mean, colour=sex)) +
geom_errorbar(aes(ymin=weight_g.lower, ymax=weight_g.upper), width=.1) +
geom_line() +
geom_point()
as.data.frame(CI(na.omit(dati$weight_g), ci=0.95)) -> CImean
CImean
View(dati2)
names(dati2)
names(dati2)
intervalli <- group.CI(footlength_mm ~ sex,
data= dati2,
ci=0.95)
intervalli
names(dati2)
variabile <- dati2$footlength_mm
intervalli <- group.CI(variabile ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=variabile.mean, colour=sex)) +
geom_errorbar(aes(ymin=variabile.lower, ymax=variabile.upper), width=.1) +
geom_line() +
geom_point()
variabile <- dati2$footlength_mm
intervalli <- group.CI(variabile ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=variabile.mean, colour=sex)) +
geom_errorbar(aes(ymin=variabile.lower, ymax=variabile.upper), width=.1) +
geom_line() +
geom_point()
variabile <- dati2$weigth_g
intervalli <- group.CI(variabile ~ sex,
data= dati2,
ci=0.95)
variabile <- dati2$weight_g
intervalli <- group.CI(variabile ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=variabile.mean, colour=sex)) +
geom_errorbar(aes(ymin=variabile.lower, ymax=variabile.upper), width=.1) +
geom_line() +
geom_point()
variabile <- dati2$DOY
intervalli <- group.CI(variabile ~ sex,
data= dati2,
ci=0.95)
intervalli
ggplot(intervalli, aes(x=sex, y=variabile.mean, colour=sex)) +
geom_errorbar(aes(ymin=variabile.lower, ymax=variabile.upper), width=.1) +
geom_line() +
geom_point()
boot.data <- boot(dati2$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.data
boot.ci(boot.data,
conf = 0.95)
boot.data <- boot(dati2$weight_g ~ sex,
function(x,i) mean(x[i]),
R=10000)
library(tidyverse)
dati2 %>%
filter(sex == F)
dati2 %>%
filter(sex == "F")
dati2 %>%
filter(sex == "M") -> datiM
dati2 %>%
filter(sex == "F") -> datiF
library(tidyverse)
dati2 %>%
filter(sex == "F") -> datiF
dati2 %>%
filter(sex == "M") -> datiM
boot.data <- boot(datiF$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
datiF
library(tidyverse)
dati2 %>%
filter(sex == "F") -> datiF
dati2 %>%
filter(sex == "M") -> datiM
dataset <- datiF
boot.data <- boot(dataset$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
library(tidyverse)
dati2 %>%
filter(sex == "F") -> datiF
dati2 %>%
filter(sex == "M") -> datiM
dataset <- datiM
boot.data <- boot(dataset$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
boot.ci(boot.data,
conf = 0.95) -> risultati
risultati
names(risultati)
risultati$percent
risultati
risultati$percent
risultati$percent[,4:5]
library(tidyverse)
dati2 %>%
filter(sex == "F") -> datiF
dati2 %>%
filter(sex == "M") -> datiM
dataset <- datiM
boot.data <- boot(dataset$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
library(dplyr)
captures <- read.csv("data/captures.csv", sep=";")
captures %>%
filter(age=="A") -> adults
head(adults)
adults %>%
group_by(animal_id, sex) -> grouped
grouped %>%
arrange(animal_id)
grouped %>%
summarise(count=n(), individual.weight = mean(weight_g, na.rm = TRUE)) -> ind.w
ind.w
#?qqplot
qqnorm(ind.w$individual.weight); qqline(ind.w$individual.weight, col="red")
shapiro.test(ind.w$individual.weight)
t.test(ind.w$individual.weight, mu = 30)
length(na.omit(ind.w$individual.weight))
