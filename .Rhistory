# boxplot(log(y$footlength_mm), col = "lightgray")
mtext("80", line=-1)
points(x=29)
# Cleveland plot/dotchart
dotchart(y$footlength_mm)
op <- par(mfrow=c(1,2))
boxplot(y$footlength_mm, col = "lightgray", ylim=c(10,30))
# boxplot(log(y$footlength_mm), col = "lightgray")
mtext("80", line=-1)
points(x=29)
# Cleveland plot/dotchart
dotchart(y$footlength_mm)
par(op)
par(mfrow=c(1,1))
# identify the outlier
plot(x=y$footlength_mm, y=y$capture_id)
identify(x=y$footlength_mm, y=y$capture_id)
# press Esc to stop the identify stuff
y[102,]
# press Esc to stop the identify stuff
y[102,3]
# press Esc to stop the identify stuff
y[102,]
(y$footlength_mm)[y$footlength_mm > 70]
y[y$footlength_mm > 70]
y[1:10,]
y[5:10,]
y["29",] # by row name, useful if we removed some rows from the dataset
library(tidyverse)
filter(y, trap_id > 43)
filter(y, trap_id < 5 | trap_id > 65)
arrange(y, trap_id)
y[,c("chip","trap_id")]
y[,c("chip","trap_id")] %>% filter(trap_id > 65)
y[,c("chip","trap_id")] %>% filter(trap_id > 65) %>% arrange(trap_id)
y %>% select(chip, trap_id) %>% filter(trap_id > 65) %>% arrange(trap_id)
y$age
mean(y$weight_g)
mean(y$weight_g, na.rm=TRUE)
y %>% group_by(age) %>% summarise(mean.w = mean(na.omit(weight_g)))
y %>% group_by(age) %>% summarise(mean(na.omit(weight_g)))
y %>% group_by(age) %>% summarise(mean.w = mean(na.omit(weight_g)))
y$sex
y %>% group_by(age, sex) %>% summarise(mean.w = mean(na.omit(weight_g)))
y %>% group_by(age, na.omit(sex)) %>% summarise(mean.w = mean(na.omit(weight_g)))
na.omit(y$sex)
na.omit(y) %>% group_by(age, sex) %>% summarise(mean.w = mean(na.omit(weight_g)))
na.omit(y)
y <- read.csv("data/export.csv",sep=";")
head(y)
View(y)
# in quanti plot sono stati raccolti i dati?
distinct(y[,"Plot"])
# in quanti plot sono stati raccolti i dati?
distinct(y["Plot"])
# in quanti plot sono stati raccolti i dati?
unique(y$Plot)
length(unique(y$Plot))
# in quali anni sono stati raccolti i dati?
y$X...Date
# in quali anni sono stati raccolti i dati?
class(y$X...Date)
as.POSIXct(y$X...Date)
# il numero di animali rilevati è diverso nei diversi plot o nei diversi anni?
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
group_by(Plot) %>%
count(n())
# il numero di animali rilevati è diverso nei diversi plot o nei diversi anni?
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
group_by(Plot) %>%
n()
# il numero di animali rilevati è diverso nei diversi plot o nei diversi anni?
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
group_by(Plot) %>%
count()
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
filter(specie == "DM")
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
filter(specie = "DM")
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
filter(species == "DM")
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
filter(species == "DM") %>%
group_by(sex) %>%
count()
# quanti maschi e quante femmine sono presenti per la specie DM?
y %>%
filter(species == "DM") %>%
group_by(Sex) %>%
count()
# quanto pesano gli animali?
mean(y$Weight, na.rm = TRUE)
mean(na.omit(y$Weight))
# ci sono dei valori anomali nel peso degli animali?
boxplot(y$Weight)
# ci sono dei valori anomali nel peso degli animali?
boxplot(y$Weight)
boxplot(Weight ~ species, data = y)
y2 <- na.omit(y)
dim(y)
dim(y2)
y %>%
filter(species == "DM") %>%
filter(Weight < 150)
y %>%
filter(species == "NAS") %>%
filter(Weight < 150)
# qual è il peso medio delle diverse specie?
y %>%
filter(species == "DM") -> yDM
yDM
mean(yDM$Weight, na.rm = TRUE)
y %>%
group_by(species) %>%
summarise(media = mean(na.omit(Weight)))
# quali sono i dati di peso non attendibili?
y %>% filter(scale_calibrated == TRUE)
# quali sono i dati di peso non attendibili?
y %>% filter(scale_calibrated == FALSE)
# il numero di animali rilevati è diverso nei diversi plot o nei diversi anni?
y %>%
group_by(Plot) %>%
count()
# il numero di animali rilevati è diverso nei diversi plot o nei diversi anni?
y %>%
group_by(Plot, Sex) %>%
count()
y %>%
filter(species == "DM") %>%
group_by(Sex) %>%
count()
y$Plot
# in quanti plot sono stati raccolti i dati?
unique(y$Plot)
length(unique(y$Plot))
y %>%
filter(species == "NAS") %>%
group_by(Sex) %>%
count()
y$Plot
y %>%
filter(species == "OX") -> yOX
yOX$Weight
sample(x = 1:6, size = 5, replace = FALSE)
sample(x = 1:6, size = 5, replace = FALSE)
sample(x = 1:6, size = 20, replace = TRUE)
sample(x = 1:6, size = 20, replace = TRUE) # you get different numbers
sample(x = 1:6, size = 20, replace = TRUE) # again
sample(x = 1:6, size = 5, replace = FALSE)
sample(x = 1:6, size = 20, replace = TRUE)
sample(x = 1:6, size = 5, replace = FALSE)
sample(x = 1:6, size = 20, replace = TRUE)
sample(x = 1:6, size = 20, replace = TRUE) # you get different numbers
sample(x = 1:6, size = 20, replace = TRUE) # again
RollDie <- function(n) sample(1:6, n, replace = TRUE)
RollDie
d1 <- RollDie(n = 50)
d1
sum(d1 == 6)
sum(d1 == 6)/50
hist(d1, probability = TRUE, breaks = seq(0.5,6.5,1))
sims <- vector("list", 500)
probs <- vector("numeric", 500)
for (n in 1:500) {
sims[[n]] <- RollDie(n)
probs[n] <- sum(sims[[n]] == 6)/n
}
plot(probs)
abline(h=1/6)
1/6
sample(x=c("testa","croce"))
sample(x=c("testa","croce"), size = 5, replace = TRUE)
c("testa","croce")
sample(x=c("testa","croce"), size = 5, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
roll1 = NULL  #This initializes our variable - i.e. it creates a spot in memory for it. We need to do this for any vector, table, matrix, dataframe, but not for single numbers
roll2 = NULL
for (i in 1:100) {
roll1[i] = RollDie(1)
roll2[i] = RollDie(1)
}
# We can ask how many doubles we came up with:
sum(roll1 == roll2)
# relative frequency
sum(roll1 == roll2)/100
roll1 <- vector("list", 500)
roll2 <- vector("list", 500)
probs <- vector("numeric", 500)
for (n in 1:500) {
roll1[[n]] <- RollDie(n)
roll2[[n]] <- RollDie(n)
probs[n] <- sum(roll1[[n]] == roll2[[n]])/n
}
plot(probs)
abline(h=1/6)
roll1
n = 500
roll1 = NULL  #This initializes our variable - i.e. it creates a spot in memory for it. We need to do this for any vector, table, matrix, dataframe, but not for single numbers
roll2 = NULL
for (i in 1:n) {
roll1[i] = RollDie(1)
roll2[i] = RollDie(1)
}
hist((roll1 + roll2), density = 100, breaks = 1:12, prob = T)
barplot(table(roll1 + roll2), main = "2 Dice Sum, 100 Rolls")  #this works better for this case
rolls <- roll1 + roll2
sum(rolls == 7)
sum(rolls == 7)/n
n = 1500
roll1 = NULL  #This initializes our variable - i.e. it creates a spot in memory for it. We need to do this for any vector, table, matrix, dataframe, but not for single numbers
roll2 = NULL
for (i in 1:n) {
roll1[i] = RollDie(1)
roll2[i] = RollDie(1)
}
# We can ask how many times this happen:
sum(roll1 == 6 & roll2 == 6)
# the relative frequency is:
sum(roll1 == 6 & roll2 == 6)/n
(1/6)*(1/6)
1/3
y <- read.csv("data/captures.csv",sep=";")
y <- na.omit(y[,c("age", "sex")])
View(y)
y %>%
group_by(age) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
library(dplyr)
y %>%
group_by(age) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
age.marginal.df <-
y %>%
group_by(age) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
age.marginal.df
sex.marginal.df <-
y %>%
group_by(sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
sex.marginal.df
y %>%
group_by(sex) %>%
summarise(n = n())
y %>%
group_by(sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
joint.df <-
y %>%
group_by(age, sex) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = n/sum(n))
joint.df
32+47+1+13
32/93
joint.prob <-
joint.df %>%
filter(age == "A", sex == "F") %>%
.$prop
joint.prob
marg.prob <-
age.marginal.df %>%
filter(age == "A") %>%
.$prop
marg.prob
CI(dati$weight_g, ci=0.95)
library(Rmisc)
install.packages("Rmisc")
library(Rmisc)
library(Hmisc)
install.packages("Hmisc")
library(Rmisc)
library(Hmisc)
library(ggplot2)
library(boot)
dati <- read.csv("data/captures.csv", sep=";")
CI(dati$weight_g, ci=0.95)
CI(na.omit(dati$weight_g), ci=0.95)
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
dati2 <- na.omit(dati)
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli <- group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
intervalli
group.CI(weight_g ~ sex,
data= dati2,
ci=0.95)
ggplot(intervalli, aes(x=sex, y=weight_g.mean, colour=sex)) +
geom_errorbar(aes(ymin=weight_g.lower, ymax=weight_g.upper), width=.1) +
geom_line() +
geom_point()
class(CImean)
as.data.frame(CI(na.omit(dati$weight_g), ci=0.95)) -> CImean
class(CImean)
CImean
CI(na.omit(dati$weight_g), ci=0.95)
boot.data <- boot(dati2$weight_g,
function(x,i) mean(x[i]),
R=10000)
dim(boot.data)
length(boot.data)
head(boot.data)
boot.data <- boot(dati2$weight_g,
function(x,i) mean(x[i]),
R=10000)
boot.ci(boot.data,
conf = 0.95)
library(dplyr)
captures <- read.csv("data/captures.csv", sep=";")
captures %>%
filter(age=="A") -> adults
head(adults)
adults %>%
group_by(animal_id, sex) -> grouped
grouped %>%
arrange(animal_id)
grouped %>%
summarise(count=n(), individual.weight = mean(weight_g, na.rm = TRUE)) -> ind.w
ind.w
#?qqplot
qqnorm(ind.w$individual.weight); qqline(ind.w$individual.weight, col="red")
shapiro.test(ind.w$individual.weight)
t.test(ind.w$individual.weight, mu = 30)
length(na.omit(ind.w$individual.weight))
library(dplyr)
captures <- read.csv("data/captures.csv", sep=";")
captures %>%
filter(age=="A") -> adults
head(adults)
adults %>%
group_by(animal_id, sex) -> grouped
grouped %>%
arrange(animal_id)
grouped %>%
summarise(count=n(), individual.weight = mean(weight_g, na.rm = TRUE)) -> ind.w
ind.w
#?qqplot
qqnorm(ind.w$individual.weight); qqline(ind.w$individual.weight, col="red")
shapiro.test(ind.w$individual.weight)
t.test(ind.w$individual.weight, mu = 30)
length(na.omit(ind.w$individual.weight))
## is the weight of females greater than the weight of males?
# we use again the summarise dplyr function
ind.w %>%
group_by(sex) %>%
summarise(count=n(), class.weight = mean(individual.weight, na.rm = TRUE))
# again, if you could not install dplyr, use the following code
# tapply(ind.w$individual.weight, ind.w$sex, mean, na.rm = TRUE)
# We can see the difference in weight that we observe between males and females
w.f <- (subset(ind.w, sex=="F"))$individual.weight
w.m <- (subset(ind.w, sex=="M"))$individual.weight
par(mfrow=c(1,2))
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.m); qqline(w.m, col="red")
shapiro.test(w.f)
shapiro.test(w.m)
x <- rnorm(100,0,1)
curve(df(x, df1=1, df2=1), from=0, to=5, lty=1, ylim=c(0,2))
curve(df(x, df1=2, df2=1), from=0, to=5, lty=2, add=T)
curve(df(x, df1=5, df2=2), from=0, to=5, lty=3, add=T)
curve(df(x, df1=100, df2=1), from=0, to=5, lty=4, add=T)
curve(df(x, df1=100, df2=100), from=0, to=5, lty=5, add=T)
library(dplyr)
captures <- read.csv("data/captures.csv", sep=";")
captures %>%
filter(age=="A") -> adults
head(adults)
adults %>%
group_by(animal_id, sex) -> grouped
grouped %>%
arrange(animal_id)
grouped %>%
summarise(count=n(), individual.weight = mean(weight_g, na.rm = TRUE)) -> ind.w
ind.w
length(ind.w$individual.weight)
## is the weight of females and males different?
# we use again the summarise dplyr function
ind.w %>%
group_by(sex) %>%
summarise(count=n(), class.weight = mean(individual.weight, na.rm = TRUE))
# again, if you could not install dplyr, use the following code
# tapply(ind.w$individual.weight, ind.w$sex, mean, na.rm = TRUE)
# We can see the difference in weight that we observe between males and females
w.f <- (subset(ind.w, sex=="F"))$individual.weight
w.m <- (subset(ind.w, sex=="M"))$individual.weight
# we use again the summarise dplyr function
ind.w %>%
group_by(sex) %>%
summarise(count=n(), class.weight = mean(individual.weight, na.rm = TRUE))
ind.w
ind.w$individual.weight
15+9
24+8
par(mfrow=c(1,2))
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.m); qqline(w.m, col="red")
shapiro.test(w.f)
shapiro.test(w.m)
qqnorm(w.f)
qqline(w.f, col="red")
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.f)
qqline(w.f, col="red")
qqnorm(w.f); qqline(w.f, col="red")
par(mfrow=c(1,2))
qqnorm(w.f); qqline(w.f, col="red")
qqnorm(w.m); qqline(w.m, col="red")
shapiro.test(w.f)
shapiro.test(w.m)
var(w.f, na.rm = T)
var(w.m, na.rm = T)
var.test(w.f,w.m)
var(w.f, na.rm = T)/var(w.m, na.rm = T)
# ?t.test
t.test(w.f, w.m,
var.equal = TRUE,
paired = FALSE,
alternative = "two.sided") # greater/less
# normality test
# with a qqplot
par(mfrow=c(1,2))
qqnorm(x); qqline(x, col="red")
x <- c(15,10,13,7, 9,8,21,9,14,8)
y <- c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12)
# normality test
# with a qqplot
par(mfrow=c(1,2))
qqnorm(x); qqline(x, col="red")
qqnorm(y); qqline(y, col="red")
# with the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# homogeneity of variances
var(x)/var(y)
var.test(x,y)
#t-test
t.test(x,y,
paired = FALSE,
var.equal = TRUE,
alternative = "two.sided")
#t-test
t.test(x,y,
paired = FALSE,
var.equal = FALSE,
alternative = "two.sided")
x <- c(3, 0, 5, 2, 5, 5, 5, 4, 4, 5)
y <- c(2, 1, 4, 1, 4, 3, 3, 2, 3, 5)
# normality test
# with a qqplot
par(mfrow=c(1,2))
qqnorm(x); qqline(x, col="red")
qqnorm(y); qqline(y, col="red")
# with the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# t-test
#t-test
t.test(x,y,
paired = TRUE,
var.equal = TRUE,
alternative = "two.sided")
#t-test
t.test(x,y,
paired = FALSE,
var.equal = TRUE,
alternative = "two.sided")
x <- c(15, 10, 13, 7, 9, 8, 21, 9, 14, 8)
y <- c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12)
# normality test
# with a qqplot
par(mfrow=c(1,2))
qqnorm(x); qqline(x, col="red")
qqnorm(y); qqline(y, col="red")
# with the Shapiro-Wilk test
shapiro.test(x)
shapiro.test(y)
# homogeneity of variances
var(x)/var(y)
var.test(x,y)
#t-test
t.test(x,y,
paired = FALSE,
var.equal = TRUE,
alternative = "two.sided")
# non parametric test
wilcox.test(x,y,
paired = FALSE,
alternative = "two.sided")
