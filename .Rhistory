}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 005, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105, 105, 105, 105, 105, 105, 105),
sigma=15,
mu=100
)
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform a Z test\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test\n(n should be ≥ 30")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n is < 30)\n")
}
cat("Z test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n is < 30)\n")
}
cat("Z-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n")
}
cat("Z-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("Warning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n\n")
}
cat("Z-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
z.test <- function(x, sigma, mu = 0) {
n <- length(x)
xbar <- mean(x)
Z <- (xbar - mu) / (sigma / sqrt(n))
p_val <- 2 * (1 - pnorm(abs(Z)))
if (n < 30) {
cat("\tWarning!\nA sample size of ", n, " is too small to perform an accurate Z test (n should be ≥ 30)\n\n")
}
cat("\tZ-test\nZ = ", Z, "\tp-value =", p_val, "\n")
}
z.test(
c(105, 105, 105, 107, 103, 110, 100, 205, 5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
105, 105, 105, 105, 105, 115, 95, 105),
sigma=15,
mu=100
)
# ?cars
summary(cars)
boxplot(cars)
cars.lm <- lm(dist ~ speed, data = cars)
names(cars.lm)
coef(cars.lm)
cars.lm
lm(dist ~ speed, data = cars); lm(cars$dist ~ cars$speed)
lm(dist ~ speed)
names(cars.lm)
coef(cars.lm)
plot(1)
plot(1, 999)
plot(C(1, 999))
plot(c(1, 999))
abline((-1)*cars.lm)
abline(cars.lm)
plot(c(1, 100))
abline(cars.lm)
plot(c(1, 999))
abline(cars.lm)
plot(c(-50, 50))
abline(cars.lm)
plot(cars.lm)
?plot
dispeed <- cars$dist ~ cars$speed
dispeed
plot(dispeed)
plot(dispeed type="l")
#dispeed <- cars$dist ~ cars$speed
plot(dispeed)
plot(dispeed, type="l")
plot(dispeed, type="b")
plot(dispeed, type="c")
plot(dispeed, type="o")
plot(dispeed, type="h")
plot(dispeed, type="s")
plot(dispeed, type="S")
plot(dispeed, type="n")
plot(dispeed, type="w")
plot(dist ~ speed, data = cars, pch = 16)
abline(cars.lm, col="red", lwd=2)
summary(cars.lm)
plot(cars.lm)
-17.58 + 3.93 * (8) # point estimate
cars[5,] # real data
cars[,3]
cars[,2]
cars[,0]
-17.58 + 3.93 * (8) # point estimate
cars[5,] # real data
fitted(cars.lm)
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
points(cars$speed, fitted(cars.lm), col="red", pch=19)
predict(cars.lm, newdata = data.frame(speed = c(0,6,8,21)))
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
points(c(6,8,21),
predict(cars.lm, newdata = data.frame(speed = c(6,8,21))),
col="blue", pch=19)
predict(cars.lm, newdata = data.frame(speed = c(0,6,8,21)))
plot(dist ~ speed, data = cars, pch = 16)
abline(coef(cars.lm), col="red")
points(cars$speed, fitted(cars.lm), col="red", pch=19)
points(c(6,8,21),
predict(cars.lm, newdata = data.frame(speed = c(6,8,21))),
col="blue", pch=19)
residuals(cars.lm)
# Residual standard error
carsumry <- summary(cars.lm)
carsumry$sigma
residuals(cars.lm)[1]
residuals(cars.lm)
residuals(cars.lm)
# Residual standard error
carsumry <- summary(cars.lm)
carsumry$sigma
carsumry
summary(cars.lm)
# new <- data.frame(speed = c(5,6,21))
# predict(cars.lm, newdata = new, interval = "confidence")
# predict(cars.lm, newdata = new, interval = "prediction")
library(HH)
ci.plot(cars.lm)
# or
# library(UsingR)
# simple.lm(cars$speed, cars$dist, show.ci=TRUE)
residuals(cars.lm)
par(mfrow=c(1,3)) #3 colonne
hist(residuals(cars.lm))
boxplot(residuals(cars.lm))
qqnorm(residuals(cars.lm))
qqline(residuals(cars.lm))
par(mfrow=c(1,1)) #reset colonne
#par(mfrow=c(1, 4))
plot(cars.lm)
#par(mfrow=c(1, 1))
par(mfrow=c(1, 4))
#par(mfrow=c(2, 2))
plot(cars.lm)
par(mfrow=c(1, 1))
#par(mfrow=c(1, 4))
par(mfrow=c(2, 2))
plot(cars.lm)
par(mfrow=c(1, 1))
#par(mfrow=c(1, 4))
par(mfrow=c(2, 2))
plot(cars.lm)
par(mfrow=c(1, 1))
# par(mfrow=c(1, 4))
# par(mfrow=c(2, 2))
plot(cars.lm)
# par(mfrow=c(1, 1))
# install.packages("lmtest")
library(lmtest)
dwtest(cars.lm, alternative = "two.sided")
cars[23,]
dim(cars)
cars[-23,]
dim(cars[-23,])
plot(cars.lm)
cars[23,]
dim(cars)
cars[-23,]
dim(cars[-23,])
plot(cars.lm)
shapiro.test(residuals(cars.lm))
data(cars)
cars.lm <- lm(dist ~ speed, data = cars)
coef(cars.lm)
names(cars.lm)
residuals(cars.lm)
par(mfrow=c(1,3)) #3 colonne
hist(residuals(cars.lm))
boxplot(residuals(cars.lm))
qqnorm(residuals(cars.lm))
qqline(residuals(cars.lm))
par(mfrow=c(1,1)) #reset colonne
# par(mfrow=c(1, 4))
# par(mfrow=c(2, 2))
plot(cars.lm)
# par(mfrow=c(1, 1))
# install.packages("lmtest")
library(lmtest)
dwtest(cars.lm, alternative = "two.sided")
cars[23,]
dim(cars)
cars[-23,]
dim(cars[-23,])
shapiro.test(residuals(cars.lm))
library(lmtest)
bptest(cars.lm)
data("trees")
head(trees)
hist(trees$Volume)
hist(trees$Volume^2)
library(MASS)
?boxcox
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
plot(cars.lm)
library(lmtest)
bptest(cars.lm)
data("trees")
head(trees)
hist(trees$Volume)
hist(trees$Volume^2)
library(MASS)
?boxcox
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
20*6
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume^0.31 ~ Height + Girth, data = trees,
lambda = seq(0.1, 1.9, length = 10))
bctrans <- boxcox(Volume^0.308 ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume^0.308 ~ Height + Girth, data = trees,
lambda = seq(0.1, 1.9, length = 10))
r()
R()
Q()
t.test()
t.test(1)
t.test(c(1, 2))
t.test(c(1, 2, 1))
t.test(c(1, 2, 2, 1))
start()
?start
start(1)
start(9)
start(9); end(9)
t.test(start(9))
t.test(start(9)+1)
start(9)+1
start(9)-end(9)
5/start(9)-end(9)
5/(start(9)-end(9))
Inf
data("trees")
head(trees)
hist(trees$Volume)
hist(trees$Volume^2)
library(MASS)
?boxcox
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
boxcox(Volume ~ Height + Girth, data = trees)
data("trees")
head(trees)
hist(trees$Volume)
hist(trees$Volume^2)
library(MASS)
?boxcox
bctrans <- boxcox(Volume ~ Height + Girth, data = trees)
bctrans <- boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
max(bctrans$y)
library(dplyr)
risultati.bc <- data.frame(bctrans$y, bctrans$x)
head(risultati.bc)
arrange(risultati.bc, bctrans.y)
boxcox(Volume ~ Height + Girth, data = trees)
boxcox(Volume ~ Height + Girth, data = trees,
lambda = seq(0, 0.5, length = 10))
which(bctrans$y==max(bctrans$y))
bctrans
which(bctrans$y==max(bctrans$y))
bctrans$x[62]
hist(trees$Volume)
hist(trees$Volume^0.31)
hist(trees$Volume)
hist(trees$Volume^0.31)
arrange(risultati.bc, bctrans.y)
head(risultati.bc)
plot(lm(volume ~ height+girth, dat=trees))
plot(lm(Volume ~ Height+Girth, dat=trees))
which(trees$Volume==31)
# library(tidyverse)
library(dplyr)
library(readxl)
library(HH)
library(sjPlot)
mydata <- read_excel("data/CawRidge_LifetimeData.xlsx")
ls()
mydata <- read_excel("data/CawRidge_LifetimeData.xlsx")
head(mydata)
mydata$densityYOB <- as.numeric(mydata$densityYOB)
mydata %>%
dplyr::select(densityYOB, longevity, ALR) %>%
mutate(repr = "yes") %>%
na.omit() -> mydata
knitr::opts_chunk$set(echo = TRUE)
trees$Tall <- cut(trees$Height, breaks = c(-Inf, 76, Inf),
labels = c("no", "yes"))
trees$Tall[1:5]
class(trees$Tall)
treesdummy.lm <- lm(Volume ~ Girth + Tall, data = trees)
summary(treesdummy.lm)
plot(treesdummy.lm)
treesdummy.lm <- lm(Volume ~ Tall, data = trees)
summary(treesdummy.lm)
head(trees)
tall.trees <- subset(trees, trees$Tall=="yes")
small.trees <- subset(trees, trees$Tall=="no")
t.test(tall.trees$Volume, small.trees$Volume)
treesdummy.lm <- lm(Volume ~ Tall, data = trees)
summary(treesdummy.lm)
head(trees)
tall.trees <- subset(trees, trees$Tall=="yes")
small.trees <- subset(trees, trees$Tall=="no")
t.test(tall.trees$Volume, small.trees$Volume)
tall.trees
1==2
F
F-F
T-T
T*9
T+T
F+F
0.0007138<0.05
library(ggplot2)
ggplot(df, aes(Girth, Volume, color = tall)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE)
plot(9)
plot(tall.trees$Volume, small.trees$Volume)
scores.graderA = c(4,3,4,5,2,3,4,5)
scores.graderB = c(4,4,5,5,4,5,4,4)
scores.graderC = c(3,4,2,4,5,5,4,4)
scores <- c(scores.graderA,scores.graderB,scores.graderC)
graders <- c(rep("A",8), rep("B",8), rep("C",8))
scores.graders <- data.frame(graders,scores)
boxplot(scores ~ graders, data=scores.graders)
scores.graders
mod <- lm(scores ~ graders, data=scores.graders)
summary(mod)
